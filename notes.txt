import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import csv
from datetime import datetime
from textblob import TextBlob
import matplotlib.pyplot as plt
import schedule
import time

# ---------------------------
# Web Crawler
# ---------------------------

def crawl_site(seed_url, max_pages=10):
    visited = set()
    to_visit = [seed_url]
    collected_urls = []

    while to_visit and len(collected_urls) < max_pages:
        url = to_visit.pop()
        if url in visited:
            continue
        try:
            res = requests.get(url, timeout=5)
            soup = BeautifulSoup(res.text, "html.parser")
            visited.add(url)
            collected_urls.append(url)

            for link in soup.find_all("a", href=True):
                full_url = urljoin(url, link['href'])
                if full_url.startswith(seed_url):  # stay within domain
                    to_visit.append(full_url)

        except Exception:
            continue

    return collected_urls

def filter_news_urls(urls):
    keywords = ["news", "article", "world", "politics", "business"]
    return [url for url in urls if any(k in url.lower() for k in keywords)]

# ---------------------------
# Headline Scraper
# ---------------------------

def get_headlines_from_urls(url_list):
    headlines = []
    for url in url_list:
        try:
            res = requests.get(url, timeout=5)
            soup = BeautifulSoup(res.text, "html.parser")
            for tag in soup.find_all(["h1", "h2", "h3"]):
                text = tag.get_text(strip=True)
                if text and len(text.split()) > 3:
                    headlines.append(text)
        except:
            continue
    return headlines

def stringsToText(string_list):
    return " ".join(string_list)

# ---------------------------
# Sentiment Analysis
# ---------------------------

def analyze_sentiment(text):
    blob = TextBlob(text)
    return blob.sentiment.polarity

def get_mood_color(score):
    if score > 0.3:
        return "limegreen", "😊 Happy"
    elif score < -0.3:
        return "red", "😠 Angry"
    else:
        return "gold", "😐 Neutral"

# ---------------------------
# Visualization
# ---------------------------

def show_sentiment_bar(score):
    color, label = get_mood_color(score)
    fig, ax = plt.subplots(figsize=(6, 1))
    ax.barh([0], [score], color=color)
    ax.set_xlim(-1, 1)
    ax.set_yticks([])
    ax.set_title(f"{label} (Score: {score:.2f})", fontsize=14)
    plt.tight_layout()
    plt.show()

# ---------------------------
# Job Function
# ---------------------------

def job():
    seed = "https://www.bbc.com"
    urls = crawl_site(seed, max_pages=15)
    news_urls = filter_news_urls(urls)
    headlines = get_headlines_from_urls(news_urls)

    if not headlines:
        print("No headlines found.")
        return

    text = stringsToText(headlines)
    score = analyze_sentiment(text)
    label = get_mood_color(score)[1]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("mood_history.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, score, label])
    
    print(f"[{timestamp}] Sentiment score: {score:.2f} → {label}")
    show_sentiment_bar(score)

# ---------------------------
# Schedule It
# ---------------------------

if __name__ == "__main__":
    job()  # run immediately once
    schedule.every(10).minutes.do(job)

    print("Scheduler started. Running every 10 minutes...\n")
    while True:
        schedule.run_pending()
        time.sleep(1)
